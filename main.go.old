package main

import (
	// "fmt"
	// "github.com/radovskyb/watcher"
	// "blank.com/framework/functions"
	"github.com/yuin/gopher-lua"
	// "log"
	// "time"
)

func main2() {
	L := lua.NewState()
	// w := watcher.New()
	defer L.Close()

	// w.IgnoreHiddenFiles(true)
	// w.FilterOps(watcher.Rename, watcher.Write)
	//
	L.SetGlobal("square", L.NewFunction(square))
	L.SetGlobal("hunker", L.NewFunction(hunker))
	//
	// go func() {
	// 	for {
	// 		select {
	// 		case event := <-w.Event:
	// 			// if (event.Op == "WRITE") || (event.Op == "RENAME") {
	// 			fmt.Println(event.Path) // Print the event's info.
	// 			// }
	// 		case err := <-w.Error:
	// 			log.Fatalln(err)
	// 		case <-w.Closed:
	// 			return
	// 		}
	// 	}
	// }()
	//
	// // Watch this folder for changes.
	// if err := w.Add("config"); err != nil {
	// 	log.Fatalln(err)
	// }

	// Start the watching process - it'll check for changes every 100ms.
	// if err := w.Start(time.Millisecond * 100); err != nil {
	// 	log.Fatalln(err)
	// }

	if err := L.DoFile("config/config.lua"); err != nil {
		panic(err)
	}
}
